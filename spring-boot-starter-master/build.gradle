plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id "io.freefair.lombok" version "3.2.0"
	id 'java'
  id 'com.github.sherter.google-java-format' version '0.8'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'eclipse'

description = 'Spring Boot Starter'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

googleJavaFormat {
  options style: 'AOSP'
  source = sourceSets*.allJava
  include '**/*.java'
  exclude '**/temp/*.java'
  exclude '**/solidity/*.java'
}

verifyGoogleJavaFormat {
  source = sourceSets*.allJava
  include '**/*.java'
  exclude '**/temp/*.java'
  exclude '**/solidity/*.java'
}

check.dependsOn.remove(test)
check.dependsOn.remove(verifyGoogleJavaFormat)

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.6.RELEASE'
    compile group: 'org.springframework', name: 'spring-web', version: '5.1.6.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-logging'
	compile 'org.codehaus.groovy:groovy-all:2.5.6'
    compile 'org.projectlombok:lombok:1.18.6'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '2.1.0'
    compile 'org.fisco-bcos:web3sdk:2.0.5'
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.4'
    compile name: 'bac'

}


configurations {
	all {
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

//repositories {
//    flatDir {
//        dirs 'libs'
//    }
//}
//dependencies {
//    compile name: 'bac'
//}


configurations {
    mybatisGenerator
}

dependencies {

//MyBatis
    compile "org.mybatis:mybatis:3.4.1"
//mybatis spring 插件
    compile "org.mybatis:mybatis-spring:1.3.1"// https://mvnrepository.com/artifact/javax.servlet/jstl

// https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.21'


//公共资源包
    compile "commons-logging:commons-logging:1.2"
    compile "commons-lang:commons-lang:2.6"
    compile "org.apache.commons:commons-collections4:4.0"
    compile "commons-beanutils:commons-beanutils:1.8.3"
    compile "commons-dbcp:commons-dbcp:1.4"
    compile "commons-pool:commons-pool:1.6"

    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    //2、添加依赖
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.21'
    mybatisGenerator 'tk.mybatis:mapper:3.3.1'

}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

//task mybatisGenerate {
//    def properties = getDbProperties()
//    ant.properties['targetProject'] = projectDir.path
//    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
//    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
//    ant.properties['userId'] = properties.getProperty("jdbc.username")
//    ant.properties['password'] = properties.getProperty("jdbc.password")
//    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
//    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
//    ant.properties['modelPackage'] = properties.getProperty("package.model")
//    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
//    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
//    ant.taskdef(
//            name: 'mbgenerator',
//            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
//            classpath: configurations.mybatisGenerator.asPath
//    )
//    ant.mbgenerator(overwrite: true,
//            configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
//        propertyset {
//            propertyref(name: 'targetProject')
//            propertyref(name: 'userId')
//            propertyref(name: 'driverClass')
//            propertyref(name: 'connectionURL')
//            propertyref(name: 'password')
//            propertyref(name: 'src_main_java')
//            propertyref(name: 'src_main_resources')
//            propertyref(name: 'modelPackage')
//            propertyref(name: 'mapperPackage')
//            propertyref(name: 'sqlMapperPackage')
//        }
//    }
//}